{"name": "test_run[test_case27]", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'BFV1' failed.", "trace": "test_case = {'body_type': 'ESTATE', 'market_code': 'AT/de', 'model_code': 'S214', 'model_name': 'E-CLASS', ...}\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure\\\\Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID √∫nico y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"‚ùå Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"‚ùå Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:295: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"de68222a1c992b4d9157d9e80c4ec44e\")>\ntest_name = 'BFV1', market_code = 'AT/de', model_code = 'S214'\nmodel_name = 'E-CLASS', body_type = 'ESTATE', attempt = 1\nurls = {'BODY_TYPE': 'ESTATE', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurato...ml/motorization/CCci/AT/de/E-KLASSE/T-MODELL', 'HOME_PAGE': 'https://www.mercedes-benz.at/', 'MODEL_CODE': 'S214', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x0000018E64A84AD0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x0000018E60710E60>)\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure\\\\Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"‚ùå Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"üåê Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"‚ùå Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"‚ùå Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"‚ùå Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"üåç Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"‚ùå Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n    \n    \n        try:\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"‚úÖ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"‚úÖ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"‚ùå Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"‚úÖ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"‚ùå Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ‚ùå Test 'BFV1' failed.\n\nQAAppAllure.py:176: Failed"}, "description": "\nRuns a test for each test case, either manually defined or dynamically fetched.\n", "steps": [{"name": "Setting up stealth mode for the browser", "status": "passed", "start": 1745838658572, "stop": 1745838659618}, {"name": "Enabling network logging", "status": "passed", "start": 1745838659618, "stop": 1745838659634}, {"name": "Perform BFV1 Test Logic", "status": "passed", "steps": [{"name": "üåç Navigating to: https://www.mercedes-benz.at/passengercars/models/estate/e-class/overview.html", "status": "passed", "start": 1745838682042, "stop": 1745838688412}, {"name": "üåç Navigating back to: https://www.mercedes-benz.at/", "status": "passed", "start": 1745838688412, "stop": 1745838708221}], "start": 1745838682042, "stop": 1745838708221}, {"name": "üîç Checking userGroup in XHR responses...", "status": "passed", "steps": [{"name": "Setting campaign name substring for test: BFV1", "status": "passed", "attachments": [{"name": "Info", "source": "64a0cd09-9b8b-4a77-993d-61fc5a13f8e3-attachment.txt", "type": "text/plain"}], "start": 1745838712250, "stop": 1745838712259}, {"name": "Capturing XHR responses", "status": "passed", "attachments": [{"name": "Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_austria_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZGVfQVQiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmF0LyIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNzEifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjExMDYxODYxMDguMTc0NTgzODY4MiJ9LCJhbm9uSWQiOiJjNTlkMWUzNmQyOTlhYzc0In0sInBlcmZvcm1hbmNlIjp7fSwiZGVidWciOnsiZXhwbGFuYXRpb25zIjp0cnVlfSwiY2F0YWxvZyI6e30sImNvbnNlbnRzIjpbXSwiYWNjb3VudCI6e30sIl90b29sc0V2ZW50TGlua0lkIjoiMDg0OTYwNDIzNzQ3NTgyMTcifQ%3D%3D", "source": "4a9331c8-0d04-4ad0-8e6e-270945e2e700-attachment.json", "type": "application/json"}], "start": 1745838712261, "stop": 1745838748200}, {"name": "‚úÖ Campaign 'best-fitting-vehicle | all models | home | simple-teaser and stage' has userGroup: Default and experienceName: Target Group.", "status": "passed", "start": 1745838748220, "stop": 1745838748220}], "start": 1745838712250, "stop": 1745838748220}, {"name": "üîç Verifying personalized image...", "status": "passed", "steps": [{"name": "‚ùå Image not found in the specified selector. Error: Message: \n", "status": "passed", "attachments": [{"name": "Expected Image Source", "source": "dabf7155-983a-4adc-b840-d1b28409c8cd-attachment.txt", "type": "text/plain"}, {"name": "Image Verification Error", "source": "1126d990-bc44-4366-86ce-c6f218611d11-attachment.txt", "type": "text/plain"}], "start": 1745838758643, "stop": 1745838758656}], "start": 1745838748220, "stop": 1745838758656}, {"name": "üîç Debugging campaign images...", "status": "passed", "attachments": [{"name": "Campaign Images", "source": "b3394737-747f-469c-b43d-d38eacce7562-attachment.txt", "type": "text/plain"}], "start": 1745838758656, "stop": 1745838758796}, {"name": "üìú Scrolling to specific elements and capturing screenshot", "status": "passed", "attachments": [{"name": "Scroll Info", "source": "9d898876-ace4-4aa9-9b17-48c92b273bcc-attachment.txt", "type": "text/plain"}], "start": 1745838758796, "stop": 1745838762110}, {"name": "‚úÖ Screenshot captured and saved", "status": "passed", "attachments": [{"name": "Final Screenshot", "source": "2436d8bd-86ae-40a5-a64a-faec3adbcfe6-attachment.png", "type": "image/png"}], "start": 1745838764799, "stop": 1745838764811}], "attachments": [{"name": "URLs for E-CLASS (ESTATE)", "source": "57830c73-4736-4a8b-a880-4ec8e2369811-attachment.json", "type": "application/json"}, {"name": "Test Failure", "source": "26898c1d-e27e-41a3-928e-ce5e6638ec83-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "a238b27c-36da-4bf0-8719-8fb5e92fa940-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_name': 'BFV1', 'market_code': 'AT/de', 'model_code': 'S214', 'model_name': 'E-CLASS', 'body_type': 'ESTATE', 'urls': {'MODEL_CODE': 'S214', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/passengercars/models/estate/e-class/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/E-KLASSE/T-MODELL', 'ONLINE_SHOP': 'https://www.mercedes-benz.at/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-E/?emhsortType=price-asc&emhbodyType=STATION', 'TEST_DRIVE': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=S214&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.at/', 'BODY_TYPE': 'ESTATE', 'MODEL_NAME': 'E-CLASS'}}"}], "start": 1745838622834, "stop": 1745838824704, "uuid": "183b2393-30eb-4652-9bf4-53538d222575", "historyId": "316182da82ba1d0a23554ee24bff9516", "testCaseId": "30c1adb94d6468239eadaa98f3cf79c5", "fullName": "QAAppAllure#test_run", "labels": [{"name": "as_id", "value": "6cfa0be13ec50a5b06b8d134ee484e87"}, {"name": "parentSuite", "value": "AT/de"}, {"name": "suite", "value": "BFV1"}, {"name": "subSuite", "value": "S214 - E-CLASS (ESTATE)"}, {"name": "tag", "value": "BFV1"}, {"name": "tag", "value": "AT/de"}, {"name": "tag", "value": "S214"}, {"name": "tag", "value": "ESTATE"}, {"name": "tag", "value": "E-CLASS"}, {"name": "host", "value": "DE3SMDW0327562T"}, {"name": "thread", "value": "3956-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "QAAppAllure"}]}