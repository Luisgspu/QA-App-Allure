{"name": "test_run[test_case4]", "status": "failed", "statusDetails": {"message": "Failed: ‚ùå Test 'BFV1' failed.", "trace": "test_case = {'body_type': 'SALOON', 'market_code': 'AT/de', 'model_code': 'Z223', 'model_name': 'MAYBACH-S-CLASS', ...}\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure\\\\Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"‚ùå Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID √∫nico y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"‚ùå Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"‚ùå Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:295: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e3d28f2bf1d5187ba8f2925c6519797e\")>\ntest_name = 'BFV1', market_code = 'AT/de', model_code = 'Z223'\nmodel_name = 'MAYBACH-S-CLASS', body_type = 'SALOON', attempt = 1\nurls = {'BODY_TYPE': 'SALOON', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/S-KLASSE/MAYBACH', 'HOME_PAGE': 'https://www.mercedes-benz.at/', 'MODEL_CODE': 'Z223', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x0000021F2A70A8B0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x0000021F2A73D950>)\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure\\\\Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"‚ùå Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"üåê Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"‚ùå Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"‚ùå Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"‚ùå Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"üåç Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"‚ùå Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n    \n    \n        try:\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"‚úÖ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"‚úÖ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"‚ùå Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"‚úÖ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"‚ùå Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ‚ùå Test 'BFV1' failed.\n\nQAAppAllure.py:176: Failed"}, "description": "\nRuns a test for each test case, either manually defined or dynamically fetched.\n", "steps": [{"name": "Setting up stealth mode for the browser", "status": "passed", "start": 1745837674428, "stop": 1745837674615}, {"name": "Enabling network logging", "status": "passed", "start": 1745837674615, "stop": 1745837674622}, {"name": "Perform BFV1 Test Logic", "status": "passed", "steps": [{"name": "üåç Navigating to: https://www.mercedes-benz.at/passengercars/models/saloon/maybach-s-class/overview.html", "status": "passed", "start": 1745837685908, "stop": 1745837707558}, {"name": "üåç Navigating back to: https://www.mercedes-benz.at/", "status": "passed", "start": 1745837707559, "stop": 1745837716487}], "start": 1745837685908, "stop": 1745837716488}, {"name": "üîç Checking userGroup in XHR responses...", "status": "passed", "steps": [{"name": "Setting campaign name substring for test: BFV1", "status": "passed", "attachments": [{"name": "Info", "source": "fdb2e719-f250-4284-a361-a3c7daa46111-attachment.txt", "type": "text/plain"}], "start": 1745837720491, "stop": 1745837720496}, {"name": "Capturing XHR responses", "status": "passed", "start": 1745837720497, "stop": 1745837723740}], "start": 1745837720491, "stop": 1745837724135}, {"name": "üîç Verifying personalized image...", "status": "passed", "steps": [{"name": "‚ùå Image not found in the specified selector. Error: Message: \n", "status": "passed", "attachments": [{"name": "Expected Image Source", "source": "d0d1304e-3b06-478f-81f5-c3b83b2f87c3-attachment.txt", "type": "text/plain"}, {"name": "Image Verification Error", "source": "16d87d44-77e9-4f38-bcd0-21da5056b9f7-attachment.txt", "type": "text/plain"}], "start": 1745837734785, "stop": 1745837734794}], "start": 1745837724135, "stop": 1745837734794}, {"name": "üîç Debugging campaign images...", "status": "passed", "attachments": [{"name": "Campaign Images", "source": "f74bf66f-04ec-41f6-9845-c2508da670c6-attachment.txt", "type": "text/plain"}], "start": 1745837734794, "stop": 1745837734857}, {"name": "üìú Scrolling to specific elements and capturing screenshot", "status": "passed", "attachments": [{"name": "Scroll Info", "source": "7e247be5-9a88-419b-9045-0171c7f60cf2-attachment.txt", "type": "text/plain"}], "start": 1745837734857, "stop": 1745837738416}, {"name": "‚úÖ Screenshot captured and saved", "status": "passed", "attachments": [{"name": "Final Screenshot", "source": "e18e7601-fe9d-43b5-8136-9ca7c99228ae-attachment.png", "type": "image/png"}], "start": 1745837741280, "stop": 1745837741288}], "attachments": [{"name": "URLs for MAYBACH-S-CLASS (SALOON)", "source": "1c2311a8-053f-4759-a404-cc2fb0c3ed2d-attachment.json", "type": "application/json"}, {"source": "8d3d8a7b-cd54-47f9-913a-a5de7c9d4a89-attachment.attach"}, {"name": "Test Failure", "source": "36fd9fab-3192-4d73-af20-09c023775940-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "1a99b98c-64c9-4f7c-b92b-5379473ab8e3-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "test_case", "value": "{'test_name': 'BFV1', 'market_code': 'AT/de', 'model_code': 'Z223', 'model_name': 'MAYBACH-S-CLASS', 'body_type': 'SALOON', 'urls': {'MODEL_CODE': 'Z223', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/passengercars/models/saloon/maybach-s-class/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/S-KLASSE/MAYBACH', 'ONLINE_SHOP': '', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.at/', 'BODY_TYPE': 'SALOON', 'MODEL_NAME': 'MAYBACH-S-CLASS'}}"}], "start": 1745837669729, "stop": 1745837765527, "uuid": "cf1841ef-9563-4a35-a374-969f30260df1", "historyId": "adfdb94c52e8e22c7c60ce748f599960", "testCaseId": "30c1adb94d6468239eadaa98f3cf79c5", "fullName": "QAAppAllure#test_run", "labels": [{"name": "as_id", "value": "c62098f6db2eecbe018a65d81669d4d3"}, {"name": "parentSuite", "value": "AT/de"}, {"name": "suite", "value": "BFV1"}, {"name": "subSuite", "value": "Z223 - MAYBACH-S-CLASS (SALOON)"}, {"name": "tag", "value": "BFV1"}, {"name": "tag", "value": "AT/de"}, {"name": "tag", "value": "Z223"}, {"name": "tag", "value": "SALOON"}, {"name": "tag", "value": "MAYBACH-S-CLASS"}, {"name": "host", "value": "DE3SMDW0327562T"}, {"name": "thread", "value": "5240-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "QAAppAllure"}]}