{"uid":"d56ec060f89bcb7c","name":"test_run[test_case2]","fullName":"QAAppAllure#test_run","historyId":"1663a7584dc5e826f22174d2dabf37ae","time":{"start":1745435157738,"stop":1745435158152,"duration":414},"description":"\n    Runs a test for each test case, either manually defined or dynamically fetched.\n    ","descriptionHtml":"<pre><code>Runs a test for each test case, either manually defined or dynamically fetched.\n</code></pre>\n","status":"broken","statusMessage":"Exception: ❌ Not to test due to lack of TEST_DRIVE URL.","statusTrace":"test_case = {'body_type': 'COUPE', 'market_code': 'IT/it', 'model_code': 'C236', 'model_name': 'CLE', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:356: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"989482921b101e276d171f4e73c0ef48\")>\ntest_name = 'BFV3', market_code = 'IT/it', model_code = 'C236'\nmodel_name = 'CLE', body_type = 'COUPE', attempt = 1\nurls = {'BODY_TYPE': 'COUPE', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLE-KLASSE/COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'MODEL_CODE': 'C236', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f37ea0cad10>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f37ea0cadd0>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        max_retries = 6\n        retries = 0\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            return\n    \n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                raise Exception(f\"❌ Not possible to test due to lack of CONFIGURATOR URL.\")\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                raise Exception(f\"❌ Not possible to test due to lack of ONLINE_SHOP URL.\")\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n>               raise Exception(f\"❌ Not to test due to lack of TEST_DRIVE URL.\")\nE               Exception: ❌ Not to test due to lack of TEST_DRIVE URL.\n\nQAAppAllure.py:129: Exception","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":2,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1745435157738,"stop":1745435157738,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\n    Runs a test for each test case, either manually defined or dynamically fetched.\n    ","status":"broken","statusMessage":"Exception: ❌ Not to test due to lack of TEST_DRIVE URL.","statusTrace":"test_case = {'body_type': 'COUPE', 'market_code': 'IT/it', 'model_code': 'C236', 'model_name': 'CLE', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:356: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"989482921b101e276d171f4e73c0ef48\")>\ntest_name = 'BFV3', market_code = 'IT/it', model_code = 'C236'\nmodel_name = 'CLE', body_type = 'COUPE', attempt = 1\nurls = {'BODY_TYPE': 'COUPE', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLE-KLASSE/COUPE', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'MODEL_CODE': 'C236', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f37ea0cad10>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f37ea0cadd0>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        max_retries = 6\n        retries = 0\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            return\n    \n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                raise Exception(f\"❌ Not possible to test due to lack of CONFIGURATOR URL.\")\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                raise Exception(f\"❌ Not possible to test due to lack of ONLINE_SHOP URL.\")\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n>               raise Exception(f\"❌ Not to test due to lack of TEST_DRIVE URL.\")\nE               Exception: ❌ Not to test due to lack of TEST_DRIVE URL.\n\nQAAppAllure.py:129: Exception","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1745435158065,"stop":1745435158092,"duration":27},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1745435158092,"stop":1745435158094,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[{"uid":"b1272fd20e8000","name":"URLs for CLE (COUPE)","source":"b1272fd20e8000.json","type":"application/json","size":599},{"uid":"bbf9164bf9ea0592","name":"Error for CLE (COUPE)","source":"bbf9164bf9ea0592.txt","type":"text/plain","size":53},{"uid":"dfda6f38b83d38b5","name":"log","source":"dfda6f38b83d38b5.txt","type":"text/plain","size":380}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":3,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"f1087fdf2ccfe0388ee90885dd23781e"},{"name":"parentSuite","value":"IT/it"},{"name":"suite","value":"BFV3"},{"name":"subSuite","value":"C236 - CLE (COUPE)"},{"name":"tag","value":"BFV3"},{"name":"tag","value":"IT/it"},{"name":"tag","value":"C236"},{"name":"tag","value":"COUPE"},{"name":"tag","value":"CLE"},{"name":"host","value":"fv-az1671-215"},{"name":"thread","value":"2081-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV3', 'market_code': 'IT/it', 'model_code': 'C236', 'urls': {'MODEL_CODE': 'C236', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/coupe/cle/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLE-KLASSE/COUPE', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLE_CLASS/?emhsortType=price-asc&emhbodyType=COUPE', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'CLE'}, 'model_name': 'CLE', 'body_type': 'COUPE'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"3845beb17fd7dcb8","status":"broken","statusDetails":"Exception: ❌ Not to test due to lack of TEST_DRIVE URL.","time":{"start":1745435157322,"stop":1745435157729,"duration":407}},{"uid":"6359dff5b9e0218a","status":"broken","statusDetails":"Exception: ❌ Not to test due to lack of TEST_DRIVE URL.","time":{"start":1745435156872,"stop":1745435157280,"duration":408}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["IT/it","COUPE","C236","CLE","BFV3"]},"source":"d56ec060f89bcb7c.json","parameterValues":["{'test_name': 'BFV3', 'market_code': 'IT/it', 'model_code': 'C236', 'urls': {'MODEL_CODE': 'C236', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/coupe/cle/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLE-KLASSE/COUPE', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLE_CLASS/?emhsortType=price-asc&emhbodyType=COUPE', 'TEST_DRIVE': '', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'BODY_TYPE': 'COUPE', 'MODEL_NAME': 'CLE'}, 'model_name': 'CLE', 'body_type': 'COUPE'}"]}