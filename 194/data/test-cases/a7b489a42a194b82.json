{"uid":"a7b489a42a194b82","name":"test_run[test_case36]","fullName":"QAAppAllure#test_run","historyId":"05db717461ca5223172974b1605bdaa2","time":{"start":1745841457966,"stop":1745841727082,"duration":269116},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'AT/de', 'model_code': 'X247-fl', 'model_name': 'GLB', ...}\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure\\\\Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b2a9502348ab9e5a6ebe4442bf362b6b\")>\ntest_name = 'BFV3', market_code = 'AT/de', model_code = 'X247-fl'\nmodel_name = 'GLB', body_type = 'SUV', attempt = 1\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.h...orization/CCci/AT/de/GLB-KLASSE/OFFROADER', 'HOME_PAGE': 'https://www.mercedes-benz.at/', 'MODEL_CODE': 'X247-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x0000024AB8DAF4D0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x0000024AB8D83B60>)\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure\\\\Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n    \n    \n        try:\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'BFV3' failed.\n\nQAAppAllure.py:176: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1745841457964,"stop":1745841457965,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'BFV3' failed.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'AT/de', 'model_code': 'X247-fl', 'model_name': 'GLB', ...}\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure\\\\Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:303: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b2a9502348ab9e5a6ebe4442bf362b6b\")>\ntest_name = 'BFV3', market_code = 'AT/de', model_code = 'X247-fl'\nmodel_name = 'GLB', body_type = 'SUV', attempt = 1\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.h...orization/CCci/AT/de/GLB-KLASSE/OFFROADER', 'HOME_PAGE': 'https://www.mercedes-benz.at/', 'MODEL_CODE': 'X247-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x0000024AB8DAF4D0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x0000024AB8D83B60>)\nscreenshot_dir = 'C:\\\\Python\\\\QA App Allure\\\\QA-App-Allure\\\\Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n    \n    \n        try:\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'BFV3' failed.\n\nQAAppAllure.py:176: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1745841485485,"stop":1745841485816,"duration":331},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1745841485816,"stop":1745841485822,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform BFV3 Test Logic","time":{"start":1745841496708,"stop":1745841533502,"duration":36794},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#cc-app-container-main > div.cc-app-container__main-frame.cc-grid-container > div.cc-app-container__navigation.ng-star-inserted > cc-navigation > nav > div > ul > li:nth-child(3) > ccwb-text > a\"}\n  (Session info: chrome=135.0.7049.115); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6565EEFA5+77893]\n\tGetHandleVerifier [0x00007FF6565EF000+77984]\n\t(No symbol) [0x00007FF6563B91BA]\n\t(No symbol) [0x00007FF65640F16D]\n\t(No symbol) [0x00007FF65640F45C]\n\t(No symbol) [0x00007FF656401B5C]\n\t(No symbol) [0x00007FF65643716F]\n\t(No symbol) [0x00007FF6564019E6]\n\t(No symbol) [0x00007FF656437340]\n\t(No symbol) [0x00007FF65645F07F]\n\t(No symbol) [0x00007FF656436F03]\n\t(No symbol) [0x00007FF656400328]\n\t(No symbol) [0x00007FF656401093]\n\tGetHandleVerifier [0x00007FF6568A7B6D+2931725]\n\tGetHandleVerifier [0x00007FF6568A2132+2908626]\n\tGetHandleVerifier [0x00007FF6568C00F3+3031443]\n\tGetHandleVerifier [0x00007FF6566091EA+184970]\n\tGetHandleVerifier [0x00007FF65661086F+215311]\n\tGetHandleVerifier [0x00007FF6565F6EC4+110436]\n\tGetHandleVerifier [0x00007FF6565F7072+110866]\n\tGetHandleVerifier [0x00007FF6565DD479+5401]\n\t(No symbol) [0x00007FFD5E03259D]\n\tRtlUserThreadStart [0x00007FFD5FE6AF38+40]\n\n","statusTrace":"  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Python\\QA App Allure\\QA-App-Allure\\TestsCodes\\test_bfv3.py\", line 79, in perform_bfv3_test\n    main_frame = shadow_root.find_element(By.CSS_SELECTOR, '#cc-app-container-main > div.cc-app-container__main-frame.cc-grid-container > div.cc-app-container__navigation.ng-star-inserted > cc-navigation > nav > div > ul > li:nth-child(3) > ccwb-text > a')\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\shadowroot.py\", line 79, in find_element\n    return self._execute(Command.FIND_ELEMENT_FROM_SHADOW_ROOT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\shadowroot.py\", line 133, in _execute\n    return self.session.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.at/passengercars/models/suv/glb/overview.html","time":{"start":1745841511638,"stop":1745841527247,"duration":15609},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/GLB-KLASSE/OFFROADER","time":{"start":1745841527247,"stop":1745841532114,"duration":4867},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Executed actions in configurator","time":{"start":1745841532115,"stop":1745841533465,"duration":1350},"status":"broken","statusMessage":"selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"#cc-app-container-main > div.cc-app-container__main-frame.cc-grid-container > div.cc-app-container__navigation.ng-star-inserted > cc-navigation > nav > div > ul > li:nth-child(3) > ccwb-text > a\"}\n  (Session info: chrome=135.0.7049.115); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6565EEFA5+77893]\n\tGetHandleVerifier [0x00007FF6565EF000+77984]\n\t(No symbol) [0x00007FF6563B91BA]\n\t(No symbol) [0x00007FF65640F16D]\n\t(No symbol) [0x00007FF65640F45C]\n\t(No symbol) [0x00007FF656401B5C]\n\t(No symbol) [0x00007FF65643716F]\n\t(No symbol) [0x00007FF6564019E6]\n\t(No symbol) [0x00007FF656437340]\n\t(No symbol) [0x00007FF65645F07F]\n\t(No symbol) [0x00007FF656436F03]\n\t(No symbol) [0x00007FF656400328]\n\t(No symbol) [0x00007FF656401093]\n\tGetHandleVerifier [0x00007FF6568A7B6D+2931725]\n\tGetHandleVerifier [0x00007FF6568A2132+2908626]\n\tGetHandleVerifier [0x00007FF6568C00F3+3031443]\n\tGetHandleVerifier [0x00007FF6566091EA+184970]\n\tGetHandleVerifier [0x00007FF65661086F+215311]\n\tGetHandleVerifier [0x00007FF6565F6EC4+110436]\n\tGetHandleVerifier [0x00007FF6565F7072+110866]\n\tGetHandleVerifier [0x00007FF6565DD479+5401]\n\t(No symbol) [0x00007FFD5E03259D]\n\tRtlUserThreadStart [0x00007FFD5FE6AF38+40]\n\n","statusTrace":"  File \"C:\\Python\\QA App Allure\\QA-App-Allure\\TestsCodes\\test_bfv3.py\", line 79, in perform_bfv3_test\n    main_frame = shadow_root.find_element(By.CSS_SELECTOR, '#cc-app-container-main > div.cc-app-container__main-frame.cc-grid-container > div.cc-app-container__navigation.ng-star-inserted > cc-navigation > nav > div > ul > li:nth-child(3) > ccwb-text > a')\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\shadowroot.py\", line 79, in find_element\n    return self._execute(Command.FIND_ELEMENT_FROM_SHADOW_ROOT, {\"using\": by, \"value\": value})[\"value\"]\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\shadowroot.py\", line 133, in _execute\n    return self.session.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 429, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\luis.sepulveda\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Perform BFV3 Test Logic","time":{"start":1745841533506,"stop":1745841632801,"duration":99295},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.at/passengercars/models/suv/glb/overview.html","time":{"start":1745841549578,"stop":1745841562151,"duration":12573},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/GLB-KLASSE/OFFROADER","time":{"start":1745841562151,"stop":1745841568662,"duration":6511},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"✅ Executed actions in configurator","time":{"start":1745841568662,"stop":1745841603302,"duration":34640},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.at/","time":{"start":1745841603302,"stop":1745841632801,"duration":29499},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":4,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1745841636803,"stop":1745841671719,"duration":34916},"status":"passed","steps":[{"name":"Setting campaign name substring for test: BFV3","time":{"start":1745841636804,"stop":1745841642930,"duration":6126},"status":"passed","steps":[],"attachments":[{"uid":"238d5dd8b4e72383","name":"Info","source":"238d5dd8b4e72383.txt","type":"text/plain","size":52}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1745841642930,"stop":1745841671672,"duration":28742},"status":"passed","steps":[],"attachments":[{"uid":"b18b8d589a40b7ab","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_austria_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZGVfQVQiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56LmF0LyIsInVybFJlZmVycmVyIjoiIiwiY2hhbm5lbCI6IldlYiIsImJlYWNvblZlcnNpb24iOjE2LCJjb25maWdWZXJzaW9uIjoiNzEifSwiZmxhZ3MiOnsicGFnZVZpZXciOnRydWV9LCJ1c2VyIjp7ImF0dHJpYnV0ZXMiOnsiZ2FDbGllbnRJRCI6IjYwMTgwNjAzMS4xNzQ1ODQxNDk3In0sImFub25JZCI6IjVmMmYyYTc1ZDRhYmU5YzgifSwicGVyZm9ybWFuY2UiOnsiZG9tTG9hZFRpbWUiOjUwOTcsInNka1BhcnNlVGltZSI6NSwic2RrTG9hZFRpbWUiOjh9LCJkZWJ1ZyI6eyJleHBsYW5hdGlvbnMiOnRydWV9LCJjYXRhbG9nIjp7fSwiY29uc2VudHMiOltdLCJhY2NvdW50Ijp7fSwiX3Rvb2xzRXZlbnRMaW5rSWQiOiI4MTk0MTc3NDMwMjUyMjI2In0%3D","source":"b18b8d589a40b7ab.json","type":"application/json","size":3372}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"❌ Campaign 'best-fitting-vehicle | all models | home | simple-teaser and stage' is in the Control Group. Retrying test without marking success or failure.","time":{"start":1745841671719,"stop":1745841671719,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"e6ea510c2dd48761","name":"URLs for GLB (SUV)","source":"e6ea510c2dd48761.json","type":"application/json","size":742},{"uid":"6f0f22b43dad8dec","name":"Test Failure","source":"6f0f22b43dad8dec.txt","type":"text/plain","size":23},{"uid":"c703075da77abea","name":"log","source":"c703075da77abea.txt","type":"text/plain","size":72122}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":15,"attachmentsCount":5,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"415babebdcef0a875c93d1bafe79bdbe"},{"name":"parentSuite","value":"AT/de"},{"name":"suite","value":"BFV3"},{"name":"subSuite","value":"X247-fl - GLB (SUV)"},{"name":"tag","value":"BFV3"},{"name":"tag","value":"AT/de"},{"name":"tag","value":"X247-fl"},{"name":"tag","value":"SUV"},{"name":"tag","value":"GLB"},{"name":"host","value":"DE3SMDW0327562T"},{"name":"thread","value":"25900-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'BFV3', 'market_code': 'AT/de', 'model_code': 'X247-fl', 'model_name': 'GLB', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'X247-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/passengercars/models/suv/glb/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/GLB-KLASSE/OFFROADER', 'ONLINE_SHOP': 'https://www.mercedes-benz.at/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-GLB/?emhsortType=price-asc&emhbodyType=SUV_OFFROADER', 'TEST_DRIVE': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=X247-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.at/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'GLB'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["SUV","AT/de","X247-fl","GLB","BFV3"]},"source":"a7b489a42a194b82.json","parameterValues":["{'test_name': 'BFV3', 'market_code': 'AT/de', 'model_code': 'X247-fl', 'model_name': 'GLB', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'X247-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.at/passengercars/models/suv/glb/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/AT/de/GLB-KLASSE/OFFROADER', 'ONLINE_SHOP': 'https://www.mercedes-benz.at/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-GLB/?emhsortType=price-asc&emhbodyType=SUV_OFFROADER', 'TEST_DRIVE': 'https://www.mercedes-benz.at/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=X247-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.at/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'GLB'}}"]}