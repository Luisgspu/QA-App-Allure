name: Allure Report Workflow

on:
  pull_request:
  push:
    branches:
      - main
      - rerun
      - feature/test-allure-report
  workflow_dispatch:    
  

permissions:
  contents: write
  pull-requests: write
  statuses: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install Poetry and dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry add pytest-rerunfailures
          poetry install --no-root

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/App" >> $GITHUB_ENV    

      - name: Run tests scripts directly
        run: |
          poetry run pytest QAAppAllure.py -n auto -s -v --reruns 5 --alluredir=allure-results

      - name: Get Allure history
        uses: actions/checkout@v3
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages


      - name: Allure Report Action form marketplace
        uses: simple-elf/allure-report-action@master
        if: always()
        continue-on-error: true
        id: allure-report
        with:
          allure_results: allure-results
          gh_pages: gh-pages
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 30

      - name: Copy latest report to gh-pages
        if: always()
        run: |
          REPORTS_DIR="gh-pages"
          NEW_REPORT_DIR="$REPORTS_DIR/${{ github.run_number }}"
          mkdir -p $NEW_REPORT_DIR
          cp -r allure-report/* $NEW_REPORT_DIR/

      - name: Update index.html with all reports
        if: always()
        run: |
          REPORTS_DIR="gh-pages"
          INDEX_FILE="$REPORTS_DIR/index.html"
          mkdir -p $REPORTS_DIR
          echo "<html><body><h1>Allure Reports</h1><table border='1'>" > $INDEX_FILE
          echo "<tr><th>Report Name</th><th>Date</th><th>Status</th></tr>" >> $INDEX_FILE
          for dir in $(ls -d $REPORTS_DIR/*/ 2>/dev/null); do
            REPORT_NAME=$(basename $dir)
            REPORT_DATE=$(date -r $dir +"%Y-%m-%d %H:%M:%S")
            STATUS_FILE="$dir/widgets/summary.json"
            if [ -f "$STATUS_FILE" ]; then
              PASSED=$(jq '.statistic.passed' $STATUS_FILE)
              FAILED=$(jq '.statistic.failed' $STATUS_FILE)
              SKIPPED=$(jq '.statistic.skipped' $STATUS_FILE)
              STATUS="PASSED: $PASSED, FAILED: $FAILED, SKIPPED: $SKIPPED"
            else
              STATUS="Unknown"
            fi
            echo "<tr><td><a href='$REPORT_NAME/index.html'>$REPORT_NAME</a></td><td>$REPORT_DATE</td><td>$STATUS</td></tr>" >> $INDEX_FILE
          done
          echo "</table></body></html>" >> $INDEX_FILE
  

      - name: Deploy report to Github Pages
        if: always()
        continue-on-error: true
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: gh-pages

      - name: Post the link to the report
        if: always()
        uses: Sibz/github-status-action@v1
        with: 
            authToken: ${{ secrets.GITHUB_TOKEN }}
            context: 'Test report'
            state: 'success'
            sha: ${{ github.sha }}
            target_url: https://luisgspu.github.io/QA-App-Allure/${{ github.run_number }}/index.html