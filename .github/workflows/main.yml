name: Main Event Workflow ‚Äî DEV Environment

on:
  push:
    branches:
      - main
      - parallel-testing
  workflow_dispatch:

env:
  TEST_EXECUTION_ENV: dev

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Install Poetry and dependencies
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry add pytest-rerunfailures
          poetry install --no-root

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$(pwd)/App" >> $GITHUB_ENV

      # üì• Descargar historial desde gh-pages
      - name: Get Allure previous results
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

       # üîç Debug gh-pages directory
      - name: Debug gh-pages directory
        run: ls -la gh-pages || echo "No gh-pages directory found"    

      # üîç Buscar √∫ltimo run publicado
      - name: Find latest run number
        id: latest_run
        run: |
          if [ -d gh-pages ]; then
            latest=$(ls gh-pages | grep '^[0-9]*$' | sort -n | tail -n 1 || echo "none")
          else
            latest="none"
          fi
          echo "latest_run=$latest" >> $GITHUB_ENV

      # üß† Copiar resultados previos (data) a allure-results
      - name: Copy previous allure-results
        run: |
          mkdir -p allure-results
          if [ "$latest_run" != "none" ] && [ -d "gh-pages/$latest_run/data" ]; then
            cp -r gh-pages/$latest_run/data/* allure-results/ || echo "No previous results to copy"
          else
            echo "No previous allure results found."
          fi

      - name: Debug Allure history
        run: ls -la allure-results/history || echo "No history found"

      # ‚ñ∂Ô∏è Ejecutar tests con Allure
      - name: Run tests scripts directly
        if: always()
        run: |
          poetry run pytest QAAppAllure.py -n auto -s -v --reruns 3 --alluredir=allure-results

      # üõ†Ô∏è Generar reporte con historial
      - name: Generate Allure Report
        if : always()
        run: |
          npm install -g allure-commandline --save-dev
          allure generate allure-results -o allure-report --clean
          
      # üì¶ Subir artifacts para debugging
      - name: Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      - name: Upload Allure raw results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results

      # üîÑ Update index.html for latest report
      - name: Update index.html for latest report
        if: always()
        run: |
          echo '<!DOCTYPE html>' > index.html
          echo '<html>' >> index.html
          echo '  <head>' >> index.html
          echo '    <meta http-equiv="refresh" content="0; url=${{ github.run_number }}/" />' >> index.html
          echo '    <title>Redirecting to Latest Allure Report</title>' >> index.html
          echo '  </head>' >> index.html
          echo '  <body>' >> index.html
          echo '    <p>Redirecting to the latest report...</p>' >> index.html
          echo '    <p>If you are not redirected automatically, <a href="${{ github.run_number }}/">click here</a>.</p>' >> index.html
          echo '  </body>' >> index.html
          echo '</html>' >> index.html

       # üöÄ Deploy Updated Index to Root of GitHub Pages
      - name: Move index.html to temporary directory
        if: always()
        run: |
          mkdir temp_deploy
          mv index.html temp_deploy/

      # Copy the new history folder to the root of gh-pages for future runs
      - name: Copy Allure history to gh-pages
        if: always()
        run: |
          cp -r allure-report/history gh-pages/history    

      # Deploy Allure Report and Index to GitHub Pages
      - name: Deploy Allure Report and Index to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.PERSONAL_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-report # Deploy the entire allure-report directory
          destination_dir: ${{ github.run_number }} # Deploy report to subdirectory
          user_name: github-actions
          user_email: github-actions@github.com
          enable_jekyll: false
          keep_files: true # Preserve existing files and subdirectories
        

      
        # üîó Output the Allure Report URL
      - name: Provide Allure Report URL
        if: always()
        run: |
          echo "Allure Report URL: https://${{ github.repository_owner }}.github.io/${{ github.repository }}/${{ github.run_number }}"

      # üîñ Metadata extra opcional
      - name: Set current date as env variable
        if: always()
        run: |
          echo "event_name=${GITHUB_EVENT_NAME}" >> $GITHUB_ENV
          echo "workflow=${GITHUB_WORKFLOW}" >> $GITHUB_ENV
          echo "actor=${GITHUB_ACTOR}" >> $GITHUB_ENV
          echo "run_number=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

