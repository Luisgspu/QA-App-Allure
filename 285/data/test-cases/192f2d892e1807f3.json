{"uid":"192f2d892e1807f3","name":"test_run[test_case41]","fullName":"QAAppAllure#test_run","historyId":"e5c30497f9dd09931e23425e8bdc7fe1","time":{"start":1746175187127,"stop":1746175346446,"duration":159319},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen SRP' failed.","statusTrace":"test_case = {'body_type': 'ESTATE', 'market_code': 'IT/it', 'model_code': 'X118-fl', 'model_name': 'CLA-SHOOTING-BRAKE', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a3b68de9d6c40247b2bd39f920a5e08f\")>\ntest_name = 'Last Seen SRP', market_code = 'IT/it', model_code = 'X118-fl'\nmodel_name = 'CLA-SHOOTING-BRAKE', body_type = 'ESTATE', attempt = 1\nurls = {'BODY_TYPE': 'ESTATE', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurato...otorization/CCci/IT/it/CLA/SHOOTING BRAKE', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'MODEL_CODE': 'X118-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f23cebcec10>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f23ce9c6d50>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n    \n    \n        try:\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Seen SRP' failed.\n\nQAAppAllure.py:176: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746175187126,"stop":1746175187126,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen SRP' failed.","statusTrace":"test_case = {'body_type': 'ESTATE', 'market_code': 'IT/it', 'model_code': 'X118-fl', 'model_name': 'CLA-SHOOTING-BRAKE', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a3b68de9d6c40247b2bd39f920a5e08f\")>\ntest_name = 'Last Seen SRP', market_code = 'IT/it', model_code = 'X118-fl'\nmodel_name = 'CLA-SHOOTING-BRAKE', body_type = 'ESTATE', attempt = 1\nurls = {'BODY_TYPE': 'ESTATE', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurato...otorization/CCci/IT/it/CLA/SHOOTING BRAKE', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'MODEL_CODE': 'X118-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7f23cebcec10>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7f23ce9c6d50>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n    \n    \n        try:\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Seen SRP' failed.\n\nQAAppAllure.py:176: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1746175187471,"stop":1746175187500,"duration":29},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1746175187500,"stop":1746175187501,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform Last Seen SRP Logic","time":{"start":1746175194997,"stop":1746175327210,"duration":132213},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLA_CLASS/?emhsortType=price-asc&emhbodyType=SHOOTING_BRAKE","time":{"start":1746175194997,"stop":1746175315098,"duration":120101},"status":"broken","statusMessage":"urllib3.exceptions.ReadTimeoutError: HTTPConnectionPool(host='localhost', port=56985): Read timed out. (read timeout=120)\n","statusTrace":"  File \"/home/runner/work/QA-App-Allure/QA-App-Allure/TestsCodes/test_LastSeenSRP.py\", line 59, in perform_LSSRP_test\n    self.driver.get(self.urls['ONLINE_SHOP'])\n    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 454, in get\n    self.execute(Command.GET, {\"url\": url})\n    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 427, in execute\n    response = self.command_executor.execute(driver_command, params)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/remote_connection.py\", line 404, in execute\n    return self._request(command_info[0], url, body=data)\n           ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/selenium/webdriver/remote/remote_connection.py\", line 428, in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/_request_methods.py\", line 143, in request\n    return self.request_encode_body(\n           ~~~~~~~~~~~~~~~~~~~~~~~~^\n        method, url, fields=fields, headers=headers, **urlopen_kw\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    )\n    ^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/_request_methods.py\", line 278, in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/poolmanager.py\", line 443, in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n        method, url, error=new_e, _pool=self, _stacktrace=sys.exc_info()[2]\n    )\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/util/retry.py\", line 474, in increment\n    raise reraise(type(error), error, _stacktrace)\n          ~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/util/util.py\", line 39, in reraise\n    raise value\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n        conn,\n    ...<10 lines>...\n        **response_kw,\n    )\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/connectionpool.py\", line 536, in _make_request\n    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)\n    ~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/.cache/pypoetry/virtualenvs/qa-allure-reporting-htvkMVQM-py3.13/lib/python3.13/site-packages/urllib3/connectionpool.py\", line 367, in _raise_timeout\n    raise ReadTimeoutError(\n        self, url, f\"Read timed out. (read timeout={timeout_value})\"\n    ) from err\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1746175331215,"stop":1746175332991,"duration":1776},"status":"passed","steps":[{"name":"Setting campaign name substring for test: Last Seen SRP","time":{"start":1746175331215,"stop":1746175331215,"duration":0},"status":"passed","steps":[],"attachments":[{"uid":"9d5ffaec1487db46","name":"Info","source":"9d5ffaec1487db46.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1746175331215,"stop":1746175332960,"duration":1745},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1746175332991,"stop":1746175343069,"duration":10078},"status":"passed","steps":[{"name":"❌ Image not found in the specified selector. Error: Message: \n","time":{"start":1746175343068,"stop":1746175343069,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"e71b0e926fa18616","name":"Expected Image Source","source":"e71b0e926fa18616.txt","type":"text/plain","size":37},{"uid":"9338f4b4a1dbd949","name":"Image Verification Error","source":"9338f4b4a1dbd949.txt","type":"text/plain","size":17}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Debugging campaign images...","time":{"start":1746175343069,"stop":1746175343076,"duration":7},"status":"passed","steps":[],"attachments":[{"uid":"c00b854ce1f9473e","name":"Campaign Images","source":"c00b854ce1f9473e.txt","type":"text/plain","size":818}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1746175343076,"stop":1746175346103,"duration":3027},"status":"passed","steps":[],"attachments":[{"uid":"990cb53596313682","name":"Scroll Info","source":"990cb53596313682.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"✅ Screenshot captured and saved","time":{"start":1746175346375,"stop":1746175346376,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8f9fa03644253bc2","name":"Final Screenshot","source":"8f9fa03644253bc2.png","type":"image/png","size":881821}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"6acd4059bf649668","name":"URLs for CLA-SHOOTING-BRAKE (ESTATE)","source":"6acd4059bf649668.json","type":"application/json","size":783},{"uid":"cdd051a59f0b9ee9","name":"Test Failure","source":"cdd051a59f0b9ee9.txt","type":"text/plain","size":32},{"uid":"8bda24766690e383","name":"log","source":"8bda24766690e383.txt","type":"text/plain","size":5439}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":12,"attachmentsCount":9,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"8796a4e750b20fde37aac4c03d60e7ff"},{"name":"parentSuite","value":"IT/it"},{"name":"suite","value":"Last Seen SRP"},{"name":"subSuite","value":"X118-fl - CLA-SHOOTING-BRAKE (ESTATE)"},{"name":"tag","value":"Last Seen SRP"},{"name":"tag","value":"IT/it"},{"name":"tag","value":"X118-fl"},{"name":"tag","value":"ESTATE"},{"name":"tag","value":"CLA-SHOOTING-BRAKE"},{"name":"host","value":"fv-az1280-79"},{"name":"thread","value":"2509-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'Last Seen SRP', 'market_code': 'IT/it', 'model_code': 'X118-fl', 'model_name': 'CLA-SHOOTING-BRAKE', 'body_type': 'ESTATE', 'urls': {'MODEL_CODE': 'X118-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/estate/cla-shooting-brake/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLA/SHOOTING BRAKE', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLA_CLASS/?emhsortType=price-asc&emhbodyType=SHOOTING_BRAKE', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=X118-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'BODY_TYPE': 'ESTATE', 'MODEL_NAME': 'CLA-SHOOTING-BRAKE'}}"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["Last Seen SRP","IT/it","CLA-SHOOTING-BRAKE","ESTATE","X118-fl"]},"source":"192f2d892e1807f3.json","parameterValues":["{'test_name': 'Last Seen SRP', 'market_code': 'IT/it', 'model_code': 'X118-fl', 'model_name': 'CLA-SHOOTING-BRAKE', 'body_type': 'ESTATE', 'urls': {'MODEL_CODE': 'X118-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.it/passengercars/models/estate/cla-shooting-brake/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/IT/it/CLA/SHOOTING BRAKE', 'ONLINE_SHOP': 'https://www.mercedes-benz.it/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-CLA_CLASS/?emhsortType=price-asc&emhbodyType=SHOOTING_BRAKE', 'TEST_DRIVE': 'https://www.mercedes-benz.it/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=X118-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.it/', 'BODY_TYPE': 'ESTATE', 'MODEL_NAME': 'CLA-SHOOTING-BRAKE'}}"]}