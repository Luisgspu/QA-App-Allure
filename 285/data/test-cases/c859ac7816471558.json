{"uid":"c859ac7816471558","name":"test_run[test_case376]","fullName":"QAAppAllure#test_run","historyId":"743018978fde3134dd8866c1837e8b91","time":{"start":1746182881955,"stop":1746182933524,"duration":51569},"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","descriptionHtml":"<p>Runs a test for each test case, either manually defined or dynamically fetched.</p>\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen SRP' failed.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'LU/de', 'model_code': 'V167-fl', 'model_name': 'GLE', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"231cfc9770824de535f74346557477ff\")>\ntest_name = 'Last Seen SRP', market_code = 'LU/de', model_code = 'V167-fl'\nmodel_name = 'GLE', body_type = 'SUV', attempt = 1\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.lu/de/passengercars/mercedes-benz-cars/car-configurato...orization/CCci/LU/de/GLE-KLASSE/OFFROADER', 'HOME_PAGE': 'https://www.mercedes-benz.lu/', 'MODEL_CODE': 'V167-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7fda1b1fabd0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7fda1b34e740>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n    \n    \n        try:\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Seen SRP' failed.\n\nQAAppAllure.py:176: Failed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":5,"retriesStatusChange":false,"beforeStages":[{"name":"screenshot_dir","time":{"start":1746182881952,"stop":1746182881952,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"\nRuns a test for each test case, either manually defined or dynamically fetched.\n","status":"failed","statusMessage":"Failed: ❌ Test 'Last Seen SRP' failed.","statusTrace":"test_case = {'body_type': 'SUV', 'market_code': 'LU/de', 'model_code': 'V167-fl', 'model_name': 'GLE', ...}\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    @pytest.mark.parametrize(\"test_case\", all_test_cases)\n    def test_run(test_case, screenshot_dir):\n        \"\"\"\n        Runs a test for each test case, either manually defined or dynamically fetched.\n        \"\"\"\n        test_name = test_case['test_name']\n        market_code = test_case.get('market_code', 'BE/nl')\n        model_code = test_case.get('model_code', None)\n        model_name = test_case.get('model_name', None)\n        body_type = test_case.get('body_type', None)\n        urls = test_case.get('urls', {})\n    \n        # Log test case details\n        logging.info(f\"Running test case: {json.dumps(test_case, indent=2)}\")\n    \n        # Validate URLs\n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            logging.error(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            allure.attach(f\"❌ Missing HOME_PAGE URL for test '{test_name}' (market: {market_code}, model: {model_code}).\")\n            return\n    \n    \n        # Generar ID único y consistente para Allure\n        uid_raw = f\"{test_name}_{market_code}_{model_code or 'unknown'}\"\n        uid_hashed = hashlib.md5(uid_raw.encode()).hexdigest()\n        allure.dynamic.id(uid_hashed)\n    \n        # Define browser options and create driver\n        options = build_chrome_options()\n        driver = create_driver(options)\n    \n        try:\n            # Set Allure suite hierarchy\n            allure.dynamic.parent_suite(f\"{market_code}\")  # Parent Suite\n            allure.dynamic.suite(f\"{test_name}\")  # Suite\n            allure.dynamic.sub_suite(f\"{model_code or 'N/A'} - {model_name or 'N/A'} ({body_type or 'N/A'})\")  # Sub-Suite\n    \n            # Add dynamic tags\n            allure.dynamic.tag(test_name)\n            allure.dynamic.tag(market_code)\n            if model_code:\n                allure.dynamic.tag(model_code)\n            if body_type:\n                allure.dynamic.tag(body_type)\n            if model_name:\n                allure.dynamic.tag(model_name)\n    \n            # Attach URLs to Allure\n            allure.attach(\n                json.dumps(urls, indent=2),\n                name=f\"URLs for {model_name or 'N/A'} ({body_type or 'N/A'})\",\n                attachment_type=allure.attachment_type.JSON\n            )\n    \n            # Extract base test name\n            base_test_name = test_name.split(\" - \")[0]\n    \n            # Run the test logic for the current model\n            try:\n                api_and_xhr = create_api_and_xhr(driver)\n                if api_and_xhr is None or api_and_xhr[1] is None:\n                    logging.error(\"❌ Failed to initialize API and XHR capturer.\")\n                    allure.attach(\"❌ Failed to initialize API and XHR capturer.\", name=\"Initialization Error\", attachment_type=allure.attachment_type.TEXT)\n                    return\n                if base_test_name in test_mapping:\n>                   run_test(driver, base_test_name, market_code, model_code, model_name, body_type, 1, urls, api_and_xhr, screenshot_dir)\n\nQAAppAllure.py:365: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"231cfc9770824de535f74346557477ff\")>\ntest_name = 'Last Seen SRP', market_code = 'LU/de', model_code = 'V167-fl'\nmodel_name = 'GLE', body_type = 'SUV', attempt = 1\nurls = {'BODY_TYPE': 'SUV', 'CONFIGURATOR': 'https://www.mercedes-benz.lu/de/passengercars/mercedes-benz-cars/car-configurato...orization/CCci/LU/de/GLE-KLASSE/OFFROADER', 'HOME_PAGE': 'https://www.mercedes-benz.lu/', 'MODEL_CODE': 'V167-fl', ...}\napi_and_xhr = (<App.vehicle_api.VehicleAPI object at 0x7fda1b1fabd0>, <App.XHRResponseCapturer.XHRResponseCapturer object at 0x7fda1b34e740>)\nscreenshot_dir = '/home/runner/work/QA-App-Allure/QA-App-Allure/Tests'\n\n    def run_test(driver, test_name, market_code, model_code, model_name, body_type, attempt, urls, api_and_xhr, screenshot_dir):\n        vehicle_api, xhr_capturer = api_and_xhr\n        test_success = False\n    \n        if not urls or 'HOME_PAGE' not in urls or not urls['HOME_PAGE']:\n            allure.attach(f\"❌ Could not fetch valid URLs for test '{test_name}' (market: {market_code}, model: {model_code})\")\n            pytest.fail(f\"Missing HOME_PAGE URL for test '{test_name}'\")\n    \n        allure.step(f\"\uD83C\uDF10 Fetched URLs from API for test '{test_name}':\\n\"\n                    f\"Model Name: {urls.get('MODEL_NAME', 'N/A')}\\n\"\n                    f\"Body Type: {urls.get('BODY_TYPE', 'N/A')}\\n\"\n                    f\"URLs:\\n{json.dumps(urls, indent=2)}\")\n    \n        # BFV Logic\n        if 'CONFIGURATOR' not in urls or not urls['CONFIGURATOR']:\n            if test_name in [\"BFV1\", \"BFV2\", \"BFV3\", \"Last Configuration Started\", \"Last Configuration Completed\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of CONFIGURATOR URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'ONLINE_SHOP' not in urls or not urls['ONLINE_SHOP']:\n            if test_name in [\"BFV2\", \"BFV3\", \"Last Seen PDP\", \"Last Seen SRP\"]:\n                message = f\"❌ Skipping test '{test_name}' due to lack of ONLINE_SHOP URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        if 'TEST_DRIVE' not in urls or not urls['TEST_DRIVE']:\n            if test_name == \"BFV3\":\n                message = f\"❌ Skipping test '{test_name}' due to lack of TEST_DRIVE URL.\"\n                logging.warning(message)\n                allure.dynamic.description(message)\n                pytest.skip(message)\n    \n        try:\n            driver.get(urls['HOME_PAGE'])\n            WebDriverWait(driver, 15).until(lambda d: d.execute_script(\"return document.readyState\") == \"complete\")\n            logging.info(f\"\uD83C\uDF0D Navigated to: {urls['HOME_PAGE']}\")\n        except Exception as e:\n            logging.error(f\"❌ Error navigating to HOME_PAGE: {e}\")\n            pytest.fail(f\"Error navigating to HOME_PAGE: {e}\")\n    \n    \n    \n        try:\n            WebDriverWait(driver, 15).until(\n                EC.presence_of_element_located((By.CSS_SELECTOR, \"cmm-cookie-banner\"))\n            )\n            time.sleep(2)\n            logging.info(\"✅ Cookie banner detected.\")\n            driver.execute_script(\"\"\"\n                document.querySelector(\"cmm-cookie-banner\").shadowRoot.querySelector(\"wb7-button.button--accept-all\").click();\n            \"\"\")\n            allure.step(\"✅ Clicked on accept cookies.\")\n        except Exception as ex:\n            allure.attach(\"❌ Cookie banner not found or already accepted.\")\n    \n        # Execute test\n        if test_name in test_mapping:\n            test_instance = test_mapping[test_name](driver, urls)\n            test_instance.run()\n            allure.step(f\"✅ {test_name} test completed.\")\n            time.sleep(4)\n    \n            test_success = verify_personalization_and_capture(\n                driver, test_name, model_name, body_type, attempt, screenshot_dir,\n                test_success, xhr_capturer, urls\n            )\n    \n        if not test_success:\n            failure_message = f\"❌ Test '{test_name}' failed.\"\n            logging.error(failure_message)\n            allure.attach(failure_message, name=\"Test Failure\", attachment_type=allure.attachment_type.TEXT)\n>           pytest.fail(failure_message)\nE           Failed: ❌ Test 'Last Seen SRP' failed.\n\nQAAppAllure.py:176: Failed","steps":[{"name":"Setting up stealth mode for the browser","time":{"start":1746182882712,"stop":1746182882772,"duration":60},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Enabling network logging","time":{"start":1746182882772,"stop":1746182882774,"duration":2},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"Perform Last Seen SRP Logic","time":{"start":1746182890610,"stop":1746182913453,"duration":22843},"status":"passed","steps":[{"name":"\uD83C\uDF0D Navigated to: https://www.mercedes-benz.lu/de/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-GLE/?emhsortType=price-asc&emhbodyType=SUV_OFFROADER","time":{"start":1746182890610,"stop":1746182901688,"duration":11078},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"\uD83C\uDF0D Navigated back to: https://www.mercedes-benz.lu/","time":{"start":1746182905688,"stop":1746182910147,"duration":4459},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":2,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Checking userGroup in XHR responses...","time":{"start":1746182917454,"stop":1746182919151,"duration":1697},"status":"passed","steps":[{"name":"Setting campaign name substring for test: Last Seen SRP","time":{"start":1746182917454,"stop":1746182917455,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"8a2d4f2076f943ab","name":"Info","source":"8a2d4f2076f943ab.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"Capturing XHR responses","time":{"start":1746182917455,"stop":1746182919131,"duration":1676},"status":"passed","steps":[],"attachments":[{"uid":"b42fbfc1d0a26f12","name":"Filtered Campaign Response from https://daimleragemea.germany-2.evergage.com/api2/event/mb_luxembourg_prod?event=eyJhY3Rpb24iOiJIb21lIFBhZ2UiLCJpdGVtQWN0aW9uIjpudWxsLCJzb3VyY2UiOnsicGFnZVR5cGUiOiJob21lIiwibG9jYWxlIjoiZnJfTFUiLCJjb250ZW50Wm9uZXMiOltdLCJ1cmwiOiJodHRwczovL3d3dy5tZXJjZWRlcy1iZW56Lmx1L2ZyIiwidXJsUmVmZXJyZXIiOiIiLCJjaGFubmVsIjoiV2ViIiwiYmVhY29uVmVyc2lvbiI6MTYsImNvbmZpZ1ZlcnNpb24iOiI1NCJ9LCJmbGFncyI6eyJwYWdlVmlldyI6dHJ1ZX0sInVzZXIiOnsiYXR0cmlidXRlcyI6eyJnYUNsaWVudElEIjoiMTczMjY1NDM3OS4xNzQ2MTgyODkxIn0sImFub25JZCI6IjM2NTNkMjY0ZTc1YjRjZjEifSwicGVyZm9ybWFuY2UiOnt9LCJkZWJ1ZyI6eyJleHBsYW5hdGlvbnMiOnRydWV9LCJjYXRhbG9nIjp7fSwiY29uc2VudHMiOltdLCJhY2NvdW50Ijp7fSwiX3Rvb2xzRXZlbnRMaW5rSWQiOiI3NzY3NDQ2ODE3OTExNDU1In0%3D","source":"b42fbfc1d0a26f12.json","type":"application/json","size":3088}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"✅ Campaign 'dcp-last-seen-pdp-srp | all available models | home | simple-teaser' has userGroup: Default and experienceName: FR.","time":{"start":1746182919150,"stop":1746182919151,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Verifying personalized image...","time":{"start":1746182919151,"stop":1746182929629,"duration":10478},"status":"passed","steps":[{"name":"❌ Image not found in the specified selector. Error: Message: \n","time":{"start":1746182929628,"stop":1746182929629,"duration":1},"status":"passed","steps":[],"attachments":[{"uid":"e43219126c26d570","name":"Expected Image Source","source":"e43219126c26d570.txt","type":"text/plain","size":37},{"uid":"acb9e198d398142c","name":"Image Verification Error","source":"acb9e198d398142c.txt","type":"text/plain","size":17}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":1,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDD0D Debugging campaign images...","time":{"start":1746182929629,"stop":1746182929633,"duration":4},"status":"passed","steps":[],"attachments":[{"uid":"368e7687598dc41a","name":"Campaign Images","source":"368e7687598dc41a.txt","type":"text/plain","size":497}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"\uD83D\uDCDC Scrolling to specific elements and capturing screenshot","time":{"start":1746182929633,"stop":1746182932659,"duration":3026},"status":"passed","steps":[],"attachments":[{"uid":"b9ef9fa91741c57","name":"Scroll Info","source":"b9ef9fa91741c57.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},{"name":"✅ Screenshot captured and saved","time":{"start":1746182933417,"stop":1746182933419,"duration":2},"status":"passed","steps":[],"attachments":[{"uid":"2c4a7f03166ec5d7","name":"Final Screenshot","source":"2c4a7f03166ec5d7.png","type":"image/png","size":1041138}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":1,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"95d62e179320fea4","name":"URLs for GLE (SUV)","source":"95d62e179320fea4.json","type":"application/json","size":754},{"uid":"914ba0b569c8db43","name":"Test Failure","source":"914ba0b569c8db43.txt","type":"text/plain","size":32},{"uid":"fc528942cf7b5326","name":"log","source":"fc528942cf7b5326.txt","type":"text/plain","size":66565}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":14,"attachmentsCount":10,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"as_id","value":"a3dbe71a5d53195cbe53ff8a6e9c13c4"},{"name":"parentSuite","value":"LU/de"},{"name":"suite","value":"Last Seen SRP"},{"name":"subSuite","value":"V167-fl - GLE (SUV)"},{"name":"tag","value":"Last Seen SRP"},{"name":"tag","value":"LU/de"},{"name":"tag","value":"V167-fl"},{"name":"tag","value":"SUV"},{"name":"tag","value":"GLE"},{"name":"host","value":"fv-az1280-79"},{"name":"thread","value":"2512-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"QAAppAllure"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"test_case","value":"{'test_name': 'Last Seen SRP', 'market_code': 'LU/de', 'model_code': 'V167-fl', 'model_name': 'GLE', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'V167-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.lu/de/passengercars/models/suv/gle/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.lu/de/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/LU/de/GLE-KLASSE/OFFROADER', 'ONLINE_SHOP': 'https://www.mercedes-benz.lu/de/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-GLE/?emhsortType=price-asc&emhbodyType=SUV_OFFROADER', 'TEST_DRIVE': 'https://www.mercedes-benz.lu/de/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=V167-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.lu/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'GLE'}}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"b31adb0e5dc3f0c","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed.","time":{"start":1746182841881,"stop":1746182881925,"duration":40044}},{"uid":"f94f9490cb0e16d5","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed.","time":{"start":1746182794366,"stop":1746182841844,"duration":47478}},{"uid":"e99d4bc6b5675c3f","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed.","time":{"start":1746182752028,"stop":1746182794304,"duration":42276}},{"uid":"1482464a3262cbe2","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed.","time":{"start":1746182724188,"stop":1746182751980,"duration":27792}},{"uid":"84e0686add671502","status":"failed","statusDetails":"Failed: ❌ Test 'Last Seen SRP' failed.","time":{"start":1746182677904,"stop":1746182724169,"duration":46265}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["LU/de","GLE","Last Seen SRP","SUV","V167-fl"]},"source":"c859ac7816471558.json","parameterValues":["{'test_name': 'Last Seen SRP', 'market_code': 'LU/de', 'model_code': 'V167-fl', 'model_name': 'GLE', 'body_type': 'SUV', 'urls': {'MODEL_CODE': 'V167-fl', 'PRODUCT_PAGE': 'https://www.mercedes-benz.lu/de/passengercars/models/suv/gle/overview.html', 'CONFIGURATOR': 'https://www.mercedes-benz.lu/de/passengercars/mercedes-benz-cars/car-configurator.html/motorization/CCci/LU/de/GLE-KLASSE/OFFROADER', 'ONLINE_SHOP': 'https://www.mercedes-benz.lu/de/passengercars/buy/new-car/search-results.html/vehicleCategory-new-passenger-cars/brand-Mercedes-Benz/modelIdentifier-GLE/?emhsortType=price-asc&emhbodyType=SUV_OFFROADER', 'TEST_DRIVE': 'https://www.mercedes-benz.lu/de/passengercars/mercedes-benz-cars/online-testdrive.html#/dealer?context=OWPC&modelSeries=V167-fl&modelType=ALL', 'HOME_PAGE': 'https://www.mercedes-benz.lu/', 'BODY_TYPE': 'SUV', 'MODEL_NAME': 'GLE'}}"]}